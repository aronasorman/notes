* Webpack vs browserify
** links
*** https://gist.github.com/substack/68f8d502be42d5cd4942
*** http://blog.namangoel.com/browserify-vs-webpack-js-drama
*** http://browserify.org/
*** https://webpack.github.io/
** browserify
- made to "run node code in the browser"
- designed to run with nodejs
- other functionalities are added through plugins and transforms
** webpack
- designed to manage assets
- large core designed for that vs. small core of browserify
** Opinions
- if we're just going for static asset handling, go with webpack
- especially if we're not pulling in a lot of nodejs modules
- webpack's large core may be enough for our needs (the big question)
** Verdict
- webpack fits our needs, if we're OK with just static asset management.
* Webpack folder structuring
** links
*** https://webpack.github.io/docs/tutorials/getting-started/
*** https://webpack.github.io/docs/what-is-webpack.html
*** LESS loader: https://github.com/webpack/less-loader
* Integrating webpack with django
** links
*** how to: http://owaislone.org/blog/webpack-plus-reactjs-and-django/
*** why skip staticfiles: http://owaislone.org/blog/modern-frontends-with-django/
** why skip django staticfiles
*** "opaque, slow and hard to debug"
*** "Manually maintaining dependencies is a pain"
*** verdict: i'm not completely convinced by the arguments made by the link above. But webpack may be good enough. yet to try
** dev process
*** webpack-dev-server for dev purposes? Supports hot code reloading for react. Means compilation and serving is handled by webpack's
*** optionally, we can compile to a certain dir and then django moves it during collectstatic
*** special webpack config for dev
** prod
*** compiled during installer or sdist build time
*** special webpack config for prod




