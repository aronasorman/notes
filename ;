* Kolibri frontend design
** Needs
*** Be easily testable -- guarantee that certain things are indeed loaded, or the state can be easily queryable to make things easier to test.
*** Loose coupling between plugins -- because we can only guarantee the core plugins, other plugins should not load or avoid certain actions if their dependent plugins aren't loaded
*** Plugins must be able to write to the page
*** Plugins must be able to make API requests
*** Minimize the total number of assets loaded -- ultimate goal: make the page user-interactable as fast as possible
*** Allow dynamic installation of plugins, even after Kolibri base has been installed
**** Maybe? too hard? Stretch goal?
**** I think it would be good to decide whether we want this or not, right from the very start -- would be very hard to switch later on
** Mediator-Facade-Module pattern
*** links
**** https://addyosmani.com/largescalejavascript/
*** Mediator
**** main way of communicating between modules
**** modules broadcast events, other modules can listen to an event and react when an event is published
*** Facade
**** Clean API for interacting with the mediator
**** Aron: not exactly sure yet what API methods we should expose
*** Modules
**** Self contained pieces of code that are related to each other
**** examples:
***** chat system
***** a specific type of content recommendation
***** an exercise
*** Questions
**** Should a group of modules have their own mediator (say, between different types of content recommenders), or just one supermediator (the UN?)
**** How are we doing module permissions? How can we guarantee that a module that did not request, say, DB access, won't be able to access it? Or is it just a free-for-all?

** Mediator default events
Events that we guarantee should be in kolibri.core. Basically, functionality that all modules will likely use.

*** Making an API request
*** Writing to localstorage
*** Module lifecycles
**** module X loading started
**** module X loading completed
**** module X unloading started
**** module X unloading completed
*** Certain content requested to be loaded by the user
*** DOM state
**** ready
**** loaded
*** Page-specific data
*** Questions
**** What if a module depends on two events to be triggered -- say, user data loaded and navbar ready?
***** Can we guarantee an order of events triggered? Say, user data always loaded before navbar? Aron's suggestion: Let's not. Coupling abound
***** Maybe we can have a mechanism for combining events. Callbacks only triggered once both are done, and then data from both events are passed to the callback.
**** We'll need all modules to have some minimal JS config telling kolibri.core when to load the full module (page load, or during one of the default events)
**** How exactly will the API for these will look like:
***** register-to-event
***** create-new-event
***** publish-event
***** can modules even have access to these raw functions in the first place? Or will it be prettified by the facade?
** Modules
*** Has a lifecyle
**** Code is executed by the core during different segments of the lifecycle
**** Lifecycles
***** Module minimal config -- loaded as part of the page
****** tells us when to fully load the rest of the module
***** Module loading the rest of the code based on its minimal config
***** Module loading complete
***** Module begins unloading itself -- cleanup happens
***** Module unloading finished
*** Core modules
**** Logged in user permissions
**** content recommendation
**** Learn tab content sidebar
**** Loading user data
***** available content, as a topic tree
***** a content's metadata
***** channel data (list of channels, channel metadata)
**** default content viewers
***** video
***** audio
***** PDF
***** perseus and khan exercises

*** Questions
**** What libraries does a module have access to, by default?
**** How can they request permission for a certain component? Say, making an API request or writing to localstorage?
**** Can a module create an entirely new page?
**** Can a plugin prevent the loading of another plugin? How would it do that?
***** Say, avoid loading the default video player because the android-video-player plugin performs better
***** Maybe content can have a slightly different registration mechanism, aka there can only be one content viewer registered for a certain page.
***** Alternatively, an event callback can prevent other callbacks from running.
**** How can modules add new parts of a page? How can we expose that functionality?
***** Aron's initial idea: If a page supports dynamic content, we can have them register to an event, and then the callback would receive a DOM element they can add stuff to. That's their own part of the page.
***** Using the same mechanism above, we can have modules add stuff to the navbar -- but what if adding to the navbar depends on getting user data loaded as well?
** Facade
Basically, the API.
*** It do
**** kolibri.core.v1 -- numbered versions right from the get-go
**** Nice thing is, if it's a facade the interface can stay the same but we can change the implementation (mediator, underlying modules) however we want!
*** Questions
**** I only have a very vague notion on how this should wrap the mediator. Richard help!
